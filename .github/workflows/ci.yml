on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: CI

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  nix:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
          - macos-11
        python-version:
          - "37"
          - "38"
          - "39"
        exclude:
          - os: macos-11
            python-version: "37"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: numbsql
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: Show macos version
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          set -euo pipefail

          sw_vers
          echo
          nix shell -f '<nixpkgs>' darwin.DarwinTools -c sw_vers

      - name: Check that python3.9 is 3.9.6
        if: ${{ matrix.python-version == '39' }}
        run: |
          set -euo pipefail

          nix shell -f '<nixpkgs>' python39 -c python --version | grep '^Python 3\.9\.6$'

      - name: Build package and run tests
        run: nix build --print-build-logs --keep-going '.#numbsql${{ matrix.python-version }}'
  conda:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
          - macos-11
          - windows-latest
        python-version:
          - "3.7.1"
          - "3.7"
          - "3.8"
          - "3.9"
        deps:
          - numba: "0.53"
            llvmlite: "0.36"
          - numba: "<0.55"
            llvmlite: "<0.38"
        exclude:
          - os: macos-11
            python-version: "3.7.1"
          - os: windows-latest
            python-version: "3.7.1"
          - os: macos-11
            python-version: "3.7"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry2conda
        run: pip3 install poetry2conda poetry

      - name: Pin numba and llvmlite
        run: poetry add --lock "numba@${{ matrix.deps.numba }}" "llvmlite@${{ matrix.deps.llvmlite }}"

      - name: Generate conda environment file
        run: poetry2conda --dev pyproject.toml - | tee environment.yaml

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: numbsql
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yaml

      - name: Install the package locally
        run: pip install .

      - name: Run tests
        run: pytest --verbose --benchmark-disable --numprocesses auto --durations 10
  release:
    needs:
      - nix
      - conda
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - name: Generate a GitHub token
        uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Checkout PR
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          fetch-depth: 0

      - name: Configure git for semantic release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install poetry and semantic-release
        run: pip install poetry python-semantic-release

      - name: Semantic release
        if: ${{ github.event_name != 'pull_request' }}
        run: semantic-release publish --verbosity=DEBUG
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Semantic release
        if: ${{ github.event_name == 'pull_request' }}
        run: semantic-release publish --noop --verbosity=DEBUG
