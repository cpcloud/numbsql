on:
  push:
    branches:
      - master

name: Continuous Integration

jobs:
  nix:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
        python_version:
          - "3.7"
          - "3.8"
          - "3.9"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v12

      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: slumba
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,stupidb

      - name: Build package and run tests
        run: nix build -L --argstr python python${{ matrix.python_version }}
  conda:
    strategy:
      matrix:
        python_version:
          - "3.7"
          - "3.8"
          - "3.9"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python_version }}
          channels: conda-forge
          show-channel-urls: true
          activate-environment: slumba

      - name: Install sqlite
        run: conda install -n slumba -y sqlite

      - name: Install poetry
        run: conda install -n slumba -y poetry

      - name: Install dependencies
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate slumba
          poetry install

      - name: Install dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          conda activate slumba
          poetry install

      - name: Run tests ${{ matrix.os }}
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate slumba
          poetry run pytest --benchmark-disable

      - name: Run tests ${{ matrix.os }}
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          conda activate slumba
          poetry run pytest --benchmark-disable
  release:
    needs:
      - nix
      - conda
    outputs:
      current_version: ${{ steps.get_current_version.outputs.value }}
      new_version: ${{ steps.get_new_version.outputs.value }}
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Semantic release
        run: pip install python-semantic-release

      - name: Get current version
        id: get_current_version
        run: |
          current_version="$(semantic-release print-version --current)"
          echo "current version: $current_version"
          echo ::set-output name=value::$current_version

      - name: Semantic release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          semantic-release publish -v DEBUG -D commit_subject="chore(release): {version}" -D commit_author="github-actions <github-actions@github.com>"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get new version
        id: get_new_version
        run: |
          new_version="$(semantic-release print-version --current)"
          echo "new version: $new_version"
          echo ::set-output name=value::$new_version
  publish:
    needs:
      - release
    strategy:
      matrix:
        python_version:
          - "3.7"
          - "3.8"
          - "3.9"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python_version }}
          channels: conda-forge
          show-channel-urls: true
          activate-environment: slumba

      - name: Install sqlite
        run: conda install -n slumba -y sqlite

      - name: Install poetry
        run: conda install -n slumba -y poetry

      - name: Install dependencies ${{ matrix.os }}
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate slumba
          poetry install --no-root

      - name: Install dependencies ${{ matrix.os }}
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          conda activate slumba
          poetry install --no-root

      - name: Build wheels ${{ matrix.os }}
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate slumba
          poetry build --format wheel

      - name: Build wheels ${{ matrix.os }}
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          conda activate slumba
          poetry build --format wheel

      - name: Build and publish distribution to Test PyPI ${{ matrix.os }}
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate slumba
          poetry publish --verbose --username __token__ --password ${{ secrets.TEST_PYPI_TOKEN }} --repository https://test.pypi.org/legacy

      - name: Build and publish distribution to Test PyPI ${{ matrix.os }}
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          conda activate slumba
          poetry publish --verbose --username __token__ --password ${{ secrets.TEST_PYPI_TOKEN }} --repository https://test.pypi.org/legacy

      - name: Publish distribution to PyPI ${{ matrix.os }}
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' && needs.release.outputs.current_version != needs.release.outputs.new_version }}
        run: |
          conda activate slumba
          poetry publish --verbose --username __token__ --password ${{ secrets.PYPI_TOKEN }}

      - name: Publish distribution to PyPI ${{ matrix.os }}
        if: ${{ matrix.os == 'windows-latest' && needs.release.outputs.current_version != needs.release.outputs.new_version }}
        run: |
          conda activate slumba
          poetry publish --verbose --username __token__ --password ${{ secrets.PYPI_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: ${{ needs.release.outputs.current_version != needs.release.outputs.new_version }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: v${{ needs.release.outputs.new_version }}
          overwrite: true
          file_glob: true
